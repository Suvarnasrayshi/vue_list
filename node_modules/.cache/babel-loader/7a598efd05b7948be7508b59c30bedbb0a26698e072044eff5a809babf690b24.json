{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Add New Post\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"title\"\n}, \"Title:\", -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"body\"\n}, \"Body:\", -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"Submit\", -1 /* HOISTED */);\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Posts\", -1 /* HOISTED */);\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"form\", {\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers((...args) => _ctx.submitPost && _ctx.submitPost(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", null, [_hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.title = $event),\n    id: \"title\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.title]])]), _createElementVNode(\"div\", null, [_hoisted_3, _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.body = $event),\n    id: \"body\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.body]])]), _hoisted_4], 32 /* NEED_HYDRATION */), _hoisted_5, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.posts, post => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: post.id\n    }, [_createElementVNode(\"strong\", null, _toDisplayString(post.title), 1 /* TEXT */), _createTextVNode(\" - \" + _toDisplayString(post.body), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementVNode","for","type","_createElementBlock","_hoisted_1","onSubmit","_cache","_withModifiers","args","_ctx","submitPost","_hoisted_2","$event","title","id","required","_hoisted_3","body","_hoisted_4","_hoisted_5","_Fragment","_renderList","posts","post","key","_toDisplayString","_createTextVNode"],"sources":["/home/suvarna-sinha/Documents/gitvue/vue_list/src/components/PostForm.vue"],"sourcesContent":["<template>\n<div>\n  <h2>Add New Post</h2>\n  <form @submit.prevent=\"submitPost\">\n    <div>\n      <label for=\"title\">Title:</label>\n      <input type=\"text\" v-model=\"title\" id=\"title\" required />\n    </div>\n    <div>\n      <label for=\"body\">Body:</label>\n      <textarea v-model=\"body\" id=\"body\" required></textarea>\n    </div>\n    <button type=\"submit\">Submit</button>\n  </form>\n\n  <h2>Posts</h2>\n  <ul>\n    <li v-for=\"post in posts\" :key=\"post.id\">\n      <strong>{{ post.title }}</strong> - {{ post.body }}\n    </li>\n  </ul>\n</div>\n</template>\n\n <script setup>\n import { ref, defineProps, onMounted } from 'vue';\n\n const props = defineProps({\n   userId: Number,\n });\nconsole.log(\"id\"userId);\n\n const title = ref('');\n const body = ref('');\n const posts = ref([]);\n const submitPost = async () => {\n   const newPost = {\n     title: title.value,\n     body: body.value,\n     userId: props.userId,\n    };\n\n   const response = await fetch('https:jsonplaceholder.typicode.com/posts', {\n     method: 'POST',\n     headers: {\n       'Content-Type': 'application/json',\n     },\n     body: JSON.stringify(newPost),\n   });\n\n   const result = await response.json();\n   console.log('Created Post:', result);\n\n\n   posts.value.push(result);\n\n\n   title.value = '';\n   body.value = '';\n };\n\n onMounted(async () => {\n   const response = await fetch(`https:jsonplaceholder.typicode.com/users/${props.userId}/posts`);\n   posts.value = await response.json();\n });\n </script>\n ```"],"mappings":";gCAEEA,mBAAA,CAAqB,YAAjB,cAAY;gCAGZA,mBAAA,CAAiC;EAA1BC,GAAG,EAAC;AAAO,GAAC,QAAM;gCAIzBD,mBAAA,CAA+B;EAAxBC,GAAG,EAAC;AAAM,GAAC,OAAK;gCAGzBD,mBAAA,CAAqC;EAA7BE,IAAI,EAAC;AAAQ,GAAC,QAAM;gCAG9BF,mBAAA,CAAc,YAAV,OAAK;;uBAdXG,mBAAA,CAoBM,cAnBJC,UAAqB,EACrBJ,mBAAA,CAUO;IAVAK,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAHfC,cAAA,KAAAC,IAAA,KAGyBC,IAAA,CAAAC,UAAA,IAAAD,IAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;MAC/BR,mBAAA,CAGM,cAFJW,UAAiC,E,gBACjCX,mBAAA,CAAyD;IAAlDE,IAAI,EAAC,MAAM;IANxB,uBAAAI,MAAA,QAAAA,MAAA,MAAAM,MAAA,IAMkCH,IAAA,CAAAI,KAAK,GAAAD,MAAA;IAAEE,EAAE,EAAC,OAAO;IAACC,QAAQ,EAAR;iDAAlBN,IAAA,CAAAI,KAAK,E,KAEnCb,mBAAA,CAGM,cAFJgB,UAA+B,E,gBAC/BhB,mBAAA,CAAuD;IAV7D,uBAAAM,MAAA,QAAAA,MAAA,MAAAM,MAAA,IAUyBH,IAAA,CAAAQ,IAAI,GAAAL,MAAA;IAAEE,EAAE,EAAC,MAAM;IAACC,QAAQ,EAAR;iDAAhBN,IAAA,CAAAQ,IAAI,E,KAEzBC,UAAqC,C,4BAGvCC,UAAc,EACdnB,mBAAA,CAIK,c,kBAHHG,mBAAA,CAEKiB,SAAA,QAnBTC,WAAA,CAiBuBZ,IAAA,CAAAa,KAAK,EAAbC,IAAI;yBAAfpB,mBAAA,CAEK;MAFsBqB,GAAG,EAAED,IAAI,CAACT;QACnCd,mBAAA,CAAiC,gBAAAyB,gBAAA,CAAtBF,IAAI,CAACV,KAAK,kBAlB3Ba,gBAAA,CAkBuC,KAAG,GAAAD,gBAAA,CAAGF,IAAI,CAACN,IAAI,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}